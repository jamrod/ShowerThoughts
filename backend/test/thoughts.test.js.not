const should = require("chai").should();
const expect = require("chai").expect;
const supertest = require("supertest");
const api = supertest("http://localhost:4000");



describe("GET /", () => {
    it("Should return a 200 response", done => {
        api
            .get("/")
            .set("Accept", "application/json")
            .expect(200, done);
    });
    it("should return an array", done => {
        api
            .get("/")
            .set("Accept", "application/json")
            .end((err, res) => {
                expect(res.body).to.be.an("array");
                done();
            });
    });
    // it("should return an array of objects that have a field called 'thought'", done => {
    //     api
    //         .get("/")
    //         .set("Accept", "application/json")
    //         .end((err, res) => {
    //             expect(res.body.every(i => i.thought)).to.be.true;
    //             done();
    //         });
    // });
});

describe("Create and use _id", () => {
    let testId = ''
    before(done => {
        api
            .post("/")
            .set("Accept", "application/json")
            .send({
                name: "Jen",
                thought: "this is a thought"
            })
            .end(done);
    })
    it("should add a new thought to the collection of thoughts and return it", done => {
        api
            .get("/")
            .set("Accept", "application/json")
            .end(function (err, res) {
                let obj = res.body[res.body.length - 1]
                testId = obj._id
                console.log("ID ", testId)
                expect(obj).to.include({
                    name: "Jen",
                    thought: "this is a thought"
                });
                done();
            });
    });

    it("Should return one result based off of id", done => {
        api
            .get(`/${testId}`)
            .set("Accept", "application/json")
            .end((err, res) => {
                expect(res.body._id).to.equal(testId);
                done();
            });
    })

    before(done => {
        api
            .post(`/${testId}`)
            .set("Accept", "application/json")
            .send({
                comment: "This is a comment"
            })
            .end(done);
    });
    it("should add a new comment to thought and return it", function (done) {
        api
            .get(`/${testId}`)
            .set("Accept", "application/json")
            .end(function (err, res) {
                expect(res.body.comments[0]).to.equal("This is a comment");
                done();
            });
    });

    before(done => {
        api
            .put(before(done => {
                api
                    .put(`/${testId}`)
                    .send({
                        comments: ["This is a comment"],
                        _id: `/${testId}`,
                        name: "Jen",
                        thought: "This is a thought"
                    })
                    .set("Accept", "application/json")
                    .end(done);
            }))
        it("should change the name value in a thought and return it", done => {
            api
                .get(`/${testId}`)
                .set("Accept", "application/json")
                .end((err, res) => {
                    expect(res.body.name).to.equal("james");
                    done();
                });
        })
            .send({
                comments: ["This is a comment"],
                _id: `/${testId}`,
                name: "james",
                thought: "This is a thought"
            })
            .set("Accept", "application/json")
            .end(done);
    });
    it("should change the name value in a thought and return it", done => {
        api
            .get(`/${testId}`)
            .set("Accept", "application/json")
            .end((err, res) => {
                expect(res.body.name).to.equal("james");
                done();
            });
    });

    before(done => {
        api
            .delete(`/${testId}`)
            .set("Accept", "application/json")
            .end(done);
    });
    it("should delete the object from the array based on id", done => {
        api
            .get("/")
            .set("Accept", "application/json")
            .end((err, res) => {
                expect(res.body[res.body.length - 1]._id).to.not.include(`/${testId}`);
                done();
            });
    });

});






// describe("GET /:id", () => {
//     it("Should return one result based off of id", done => {
//         api
//             .get("/5e2a0edd266fd033acf6a64d")
//             .set("Accept", "application/json")
//             .end((err, res) => {
//                 expect(res.body._id).to.equal("5e2a0edd266fd033acf6a64d");
//                 done();
//             });
//     });
// });

// describe("POST /comment/", () => {
//     before(done => {
//         api
//             .post("/comment/5e2a0edd266fd033acf6a64d")
//             .set("Accept", "application/json")
//             .send({
//                 comment: "This is a comment"
//             })
//             .end(done);
//     });
//     it("should add a new comment to the collection of comments in the thought and return it", function (done) {
//         api
//             .get("/5e2a0edd266fd033acf6a64d")
//             .set("Accept", "application/json")
//             .end(function (err, res) {
//                 expect(res.body.comments[0]).to.equal("This is a comment");
//                 done();
//             });
//     });
// });
// describe("PUT /update/", () => {
//     before(done => {
//         api
//             .put("/update/5e2a0edd266fd033acf6a64d")
//             .send({
//                 comments: ["That's legit", "hmmm"],
//                 _id: "5e2a0edd266fd033acf6a64d",
//                 name: "james",
//                 thought: "Why do you park on a driveway but drive on a parkway?"
//             })
//             .set("Accept", "application/json")
//             .end(done);
//     });
//     it("should change the name value in a thought and return it", done => {
//         api
//             .get("/5e2a0edd266fd033acf6a64d")
//             .set("Accept", "application/json")
//             .end((err, res) => {
//                 expect(res.body.name).to.equal("james");
//                 done();
//             });
//     });
// });
// describe("DELETE /", () => {
//     before(done => {
//         api
//             .delete("/5e28a691a23021517acb7e8a")
//             .set("Accept", "application/json")
//             .end(done);
//     });
//     it("should delete the object from the array based on id", done => {
//         api
//             .get("/")
//             .set("Accept", "application/json")
//             .end((err, res) => {
//                 expect(res.body[0]._id).to.not.include("5e28a691a23021517acb7e8a");
//                 done();
//             });
//     });
// });